<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs
    title="Model Persistence Widget"
    description=""
    author="Peter de Lange"
    author_email="lange@dbis.rwth-aachen.de"
    width="300"
    height="300">

    <Require feature="opensocial-0.8" ></Require>
    <Require feature="openapp" ></Require>
    <Require feature="dynamic-height"></Require>
    
    <OAuth>		
      <Service name="openapp" xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/"		
               openapp:service="http://purl.org/role/terms/spaceService"		
               openapp:permitReadAppend="http://purl.org/role/terms/data">		
        <Request method="" url=""></Request>		
        <Authorization url=""></Authorization>		
        <Access method="" url=""></Access>		
      </Service>		
    </OAuth>
    
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
    <!-- get config and requireJS from SyncMeta deployment -->
    <script src="http://localhost:80/syncmeta/js/config.js"></script>
    <script src="http://localhost:80/syncmeta/js/lib/vendor/require.js"></script>    
    <script type="application/javascript">
    
      // auto login
      (function(){
        var cnt = 30; // 5 attempts per second => 6 seconds
        var timeout = function(){
          var btn = document.getElementById("oauthPersonalizeButton");
          var wrapper = document.getElementById("oauthPersonalize");
          if(wrapper && wrapper.offsetParent !== null && btn && btn.onclick){
            var win = null;
            var openWindow = window.open;
            window.open = function(){return win = openWindow.apply(window,arguments);};
            btn.onclick.call(btn);
            if(win){
              win.onload = function(){
                win.document.getElementsByTagName("form")[0].submit();
                setTimeout(function(){
                  window.location.reload();
                  if(win){
                    win.close();
                  }
                },1000);
              };
            }
          } else {
            if(cnt > 0){
                cnt -= 1;
                setTimeout(timeout,200);
            }
          }
        };
        timeout();
      })();
      
      //RequireJS call of jqueryui and lodash
      requirejs(['jqueryui','lodash'],function($,_){
        $(function(){
          // button and field binding
          var $deleteModel = $("#delete-model"),
              $exportModel = $("#export-model"),
              $importModel = $("#import-model"),
              $modelName = $("#modelName"),
              $fileObject = $("#file-object"),
              $feedback = $("#feedback"),
              feedbackTimeout,
              feedback = function(msg){
                  $feedback.text(msg);
                  clearTimeout(feedbackTimeout);
                  feedbackTimeout = setTimeout(function(){
                    $feedback.text("");
                  },2000);
              },
              resourceSpace = new openapp.oo.Resource(openapp.param.space());

          // read in JSON file, will be deleted in future, just for testing purposes
          var getFileContent = function(){
            var fileReader,
                files = $fileObject[0].files,
                file,
                deferred = $.Deferred();

            if (!files || files.length === 0) deferred.resolve([]);
            file = files[0];

            fileReader = new FileReader();
            fileReader.onload = function (e) {
              var data = e.target.result;
              try {
                data = JSON.parse(data);
              } catch (e){
                data = [];
              }
              deferred.resolve(data);
            };
            fileReader.readAsText(file);
            return deferred.promise();
          };

          // function that retrieves the model of the current space
          var getData = function(type){
            var spaceUri = openapp.param.space(),
                listOfDataUris = [],
                promises = [],
                mainDeferred = $.Deferred(),
                deferred = $.Deferred();

            openapp.resource.get(spaceUri,(function(deferred){
              return function(space){

                var resourceUri, resourceObj, values;
                for(resourceUri in space.data){
                  if(space.data.hasOwnProperty(resourceUri)){
                    resourceObj = space.data[resourceUri];
                    if(resourceObj['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'] &&
                        _.isArray(resourceObj['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'])){

                      values = _.map(resourceObj['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'],function(e){
                        return e.value;
                      });

                      if(_.contains(values,"http://purl.org/role/terms/Data") && _.contains(values,type)){
                        listOfDataUris.push(resourceUri);
                      }
                      
                    }
                  }
                }
                deferred.resolve();
              };

            })(deferred));
            promises.push(deferred.promise());

            $.when.apply($,promises).then(function(){
              mainDeferred.resolve(listOfDataUris);
            });

            return mainDeferred.promise();
          };

          // deletes the current model (empties the current model of this space)
          $deleteModel.click(function(){
            getData(CONFIG.NS.MY.MODEL).then(function(modelUris){
              if(modelUris.length > 0){
                _.map(modelUris,function(uri){
                  openapp.resource.del(uri,function(){
                    feedback("Done!");
                  });
                });
              } else {
                feedback("No Model!");
              }
            });
          });
          
          // retrieves the JSON representation of this space
          $exportModel.click(function(){
            getData(CONFIG.NS.MY.MODEL).then(function(modelUris){
                if(modelUris.length > 0){
                  $.get(modelUris[0]+"/:representation").done(function(data){
                    data.attributes.label.value.value = "MyTest";
                    var link = document.createElement('a');
                    link.download = "export.json";
                    link.href = 'data:,'+encodeURI(JSON.stringify(data,null,4));
                    link.click();
                  });
                } else {
                  feedback("No Model!");
                }
            });
          });

          // loads the model from a given JSON file and sets it as the space's model
          $importModel.click(function(){
            // first, clean the current model
            getData(CONFIG.NS.MY.MODEL).then(function(modelUris){
              if(modelUris.length > 0){
                _.map(modelUris,function(uri){
                  openapp.resource.del(uri);
                });
              }
              getFileContent().then(function(data){
                resourceSpace.create({
                  relation: openapp.ns.role + "data",
                  type: CONFIG.NS.MY.MODEL,
                  representation: data,
                  callback: function(){
                    feedback("Done!");
                  }
                });
              });
            });
          });
          
        });
      });
</script>
<style>
    textarea, button {
        width: 100px;
    }
</style>
<input type="file" id="file-object" value="Load a file" />
<input type="text" id="modelName">
<button id="import-model">Import Model</button>
<button id="export-model">Export Model</button>
<button id="delete-model">Delete Model</button>
<p id="feedback"></p>

    ]]>
  </Content>
</Module>
