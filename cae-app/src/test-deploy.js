import { LitElement, html } from "lit-element";
import "./versioning/versioning-element.js";
import Common from "./util/common.js";
import Static from "./static.js";
import "../node_modules/@polymer/iron-icon/iron-icon.js";
import { gt } from "es-semver";
import Auth from "./util/auth";
/**
 * @customElement
 * @polymer
 */
class TestDeploy extends LitElement {
  render() {
    return html`
      <style>
        @keyframes ldio-9k2uiavf9a {
          0% {
            transform: rotate(0);
          }
          100% {
            transform: rotate(360deg);
          }
        }
        .ldio-9k2uiavf9a div {
          box-sizing: border-box !important;
        }
        .ldio-9k2uiavf9a > div {
          position: absolute;
          width: 78px;
          height: 78px;
          top: 11px;
          left: 11px;
          border-radius: 50%;
          border: 8px solid #000;
          border-color: #85a2b6 transparent #85a2b6 transparent;
          animation: ldio-9k2uiavf9a 0.819672131147541s linear infinite;
        }

        .ldio-9k2uiavf9a > div:nth-child(2),
        .ldio-9k2uiavf9a > div:nth-child(4) {
          width: 60px;
          height: 60px;
          top: 20px;
          left: 20px;
          animation: ldio-9k2uiavf9a 0.819672131147541s linear infinite reverse;
        }
        .ldio-9k2uiavf9a > div:nth-child(2) {
          border-color: transparent #bbcedd transparent #bbcedd;
        }
        .ldio-9k2uiavf9a > div:nth-child(3) {
          border-color: transparent;
        }
        .ldio-9k2uiavf9a > div:nth-child(3) div {
          position: absolute;
          width: 100%;
          height: 100%;
          transform: rotate(45deg);
        }
        .ldio-9k2uiavf9a > div:nth-child(3) div:before,
        .ldio-9k2uiavf9a > div:nth-child(3) div:after {
          content: "";
          display: block;
          position: absolute;
          width: 8px;
          height: 8px;
          top: -8px;
          left: 27px;
          background: #85a2b6;
          border-radius: 50%;
          box-shadow: 0 70px 0 0 #85a2b6;
        }
        .ldio-9k2uiavf9a > div:nth-child(3) div:after {
          left: -8px;
          top: 27px;
          box-shadow: 70px 0 0 0 #85a2b6;
        }

        .ldio-9k2uiavf9a > div:nth-child(4) {
          border-color: transparent;
        }
        .ldio-9k2uiavf9a > div:nth-child(4) div {
          position: absolute;
          width: 100%;
          height: 100%;
          transform: rotate(45deg);
        }
        .ldio-9k2uiavf9a > div:nth-child(4) div:before,
        .ldio-9k2uiavf9a > div:nth-child(4) div:after {
          content: "";
          display: block;
          position: absolute;
          width: 8px;
          height: 8px;
          top: -8px;
          left: 18px;
          background: #bbcedd;
          border-radius: 50%;
          box-shadow: 0 52px 0 0 #bbcedd;
        }
        .ldio-9k2uiavf9a > div:nth-child(4) div:after {
          left: -8px;
          top: 18px;
          box-shadow: 52px 0 0 0 #bbcedd;
        }
        .loadingio-spinner-double-ring-cs2bskerxf {
          width: 24px;
          height: 24px;
          display: inline-block;
          overflow: hidden;
          background: none;
        }
        .ldio-9k2uiavf9a {
          width: 100%;
          height: 100%;
          position: relative;
          transform: translateZ(0) scale(0.24);
          backface-visibility: hidden;
          transform-origin: 0 0; /* see note above */
        }
        .ldio-9k2uiavf9a div {
          box-sizing: content-box;
        }
        /* generated by https://loading.io/ */
        @keyframes ldio-mr7znzzkaer {
          0% {
            transform: rotate(0);
          }
          100% {
            transform: rotate(360deg);
          }
        }
        .ldio-mr7znzzkaer div {
          box-sizing: border-box !important;
        }
        .ldio-mr7znzzkaer > div {
          position: absolute;
          width: 78px;
          height: 78px;
          top: 11px;
          left: 11px;
          border-radius: 50%;
          border: 8px solid #000;
          border-color: #85a2b6 transparent #85a2b6 transparent;
          animation: ldio-mr7znzzkaer 16.666666666666664s linear infinite;
        }

        .ldio-mr7znzzkaer > div:nth-child(2),
        .ldio-mr7znzzkaer > div:nth-child(4) {
          width: 60px;
          height: 60px;
          top: 20px;
          left: 20px;
          animation: ldio-mr7znzzkaer 16.666666666666664s linear infinite
            reverse;
        }
        .ldio-mr7znzzkaer > div:nth-child(2) {
          border-color: transparent #bbcedd transparent #bbcedd;
        }
        .ldio-mr7znzzkaer > div:nth-child(3) {
          border-color: transparent;
        }
        .ldio-mr7znzzkaer > div:nth-child(3) div {
          position: absolute;
          width: 100%;
          height: 100%;
          transform: rotate(45deg);
        }
        .ldio-mr7znzzkaer > div:nth-child(3) div:before,
        .ldio-mr7znzzkaer > div:nth-child(3) div:after {
          content: "";
          display: block;
          position: absolute;
          width: 8px;
          height: 8px;
          top: -8px;
          left: 27px;
          background: #85a2b6;
          border-radius: 50%;
          box-shadow: 0 70px 0 0 #85a2b6;
        }
        .ldio-mr7znzzkaer > div:nth-child(3) div:after {
          left: -8px;
          top: 27px;
          box-shadow: 70px 0 0 0 #85a2b6;
        }

        .ldio-mr7znzzkaer > div:nth-child(4) {
          border-color: transparent;
        }
        .ldio-mr7znzzkaer > div:nth-child(4) div {
          position: absolute;
          width: 100%;
          height: 100%;
          transform: rotate(45deg);
        }
        .ldio-mr7znzzkaer > div:nth-child(4) div:before,
        .ldio-mr7znzzkaer > div:nth-child(4) div:after {
          content: "";
          display: block;
          position: absolute;
          width: 8px;
          height: 8px;
          top: -8px;
          left: 18px;
          background: #bbcedd;
          border-radius: 50%;
          box-shadow: 0 52px 0 0 #bbcedd;
        }
        .ldio-mr7znzzkaer > div:nth-child(4) div:after {
          left: -8px;
          top: 18px;
          box-shadow: 52px 0 0 0 #bbcedd;
        }
        .loadingio-spinner-double-ring-5186tkmre65 {
          width: 24px;
          height: 24px;
          display: inline-block;
          overflow: hidden;
          background: none;
        }
        .ldio-mr7znzzkaer {
          width: 100%;
          height: 100%;
          position: relative;
          transform: translateZ(0) scale(0.24);
          backface-visibility: hidden;
          transform-origin: 0 0; /* see note above */
        }
        .ldio-mr7znzzkaer div {
          box-sizing: content-box;
        }
        /* generated by https://loading.io/ */
        @keyframes ldio-8suw7sf2g6i {
          0% {
            background: #689cc5;
          }
          12.5% {
            background: #689cc5;
          }
          12.625% {
            background: #93dbe9;
          }
          100% {
            background: #93dbe9;
          }
        }
        .ldio-8suw7sf2g6i div {
          position: absolute;
          width: 50.64px;
          height: 50.64px;
          background: #93dbe9;
          animation: ldio-8suw7sf2g6i 1.075268817204301s linear infinite;
        }
        .loadingio-spinner-blocks-uf65m2tnfnj {
          width: 211px;
          height: 211px;
          display: inline-block;
          overflow: hidden;
          background: none;
        }
        .ldio-8suw7sf2g6i {
          width: 100%;
          height: 100%;
          position: relative;
          transform: translateZ(0) scale(1);
          backface-visibility: hidden;
          transform-origin: 0 0; /* see note above */
        }
        .ldio-8suw7sf2g6i div {
          box-sizing: content-box;
        }
        /* generated by https://loading.io/ */
        @keyframes ldio-yaqjmggu7z-1 {
          0% {
            transform: rotate(0deg);
          }
          50% {
            transform: rotate(-45deg);
          }
          100% {
            transform: rotate(0deg);
          }
        }
        @keyframes ldio-yaqjmggu7z-2 {
          0% {
            transform: rotate(180deg);
          }
          50% {
            transform: rotate(225deg);
          }
          100% {
            transform: rotate(180deg);
          }
        }
        .ldio-yaqjmggu7z > div:nth-child(2) {
          transform: translate(-15px, 0);
        }
        .ldio-yaqjmggu7z > div:nth-child(2) div {
          position: absolute;
          top: 20px;
          left: 20px;
          width: 60px;
          height: 30px;
          border-radius: 60px 60px 0 0;
          background: #ff00a8;
          animation: ldio-yaqjmggu7z-1 1.075268817204301s linear infinite;
          transform-origin: 30px 30px;
        }
        .ldio-yaqjmggu7z > div:nth-child(2) div:nth-child(2) {
          animation: ldio-yaqjmggu7z-2 1.075268817204301s linear infinite;
        }
        .ldio-yaqjmggu7z > div:nth-child(2) div:nth-child(3) {
          transform: rotate(-90deg);
          animation: none;
        }
        @keyframes ldio-yaqjmggu7z-3 {
          0% {
            transform: translate(95px, 0);
            opacity: 0;
          }
          20% {
            opacity: 1;
          }
          100% {
            transform: translate(35px, 0);
            opacity: 1;
          }
        }
        .ldio-yaqjmggu7z > div:nth-child(1) {
          display: block;
        }
        .ldio-yaqjmggu7z > div:nth-child(1) div {
          position: absolute;
          top: 46px;
          left: -4px;
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background: #00ffac;
          animation: ldio-yaqjmggu7z-3 1.075268817204301s linear infinite;
        }
        .ldio-yaqjmggu7z > div:nth-child(1) div:nth-child(1) {
          animation-delay: -0.6231000000000001s;
        }
        .ldio-yaqjmggu7z > div:nth-child(1) div:nth-child(2) {
          animation-delay: -0.3069s;
        }
        .ldio-yaqjmggu7z > div:nth-child(1) div:nth-child(3) {
          animation-delay: 0s;
        }
        .loadingio-spinner-bean-eater-utpibgxvbxi {
          width: 24px;
          height: 24px;
          display: inline-block;
          overflow: hidden;
          background: none;
        }
        .ldio-yaqjmggu7z {
          width: 100%;
          height: 100%;
          position: relative;
          transform: translateZ(0) scale(0.24);
          backface-visibility: hidden;
          transform-origin: 0 0; /* see note above */
        }
        .ldio-yaqjmggu7z div {
          box-sizing: content-box;
        }
        /* generated by https://loading.io/ */
        @keyframes ldio-jm1q7kom26f {
          0% {
            top: 34px;
            left: 34px;
            width: 0;
            height: 0;
            opacity: 1;
          }
          100% {
            top: -6px;
            left: -6px;
            width: 80px;
            height: 80px;
            opacity: 0;
          }
        }
        .ldio-jm1q7kom26f div {
          position: absolute;
          border-width: 16px;
          border-style: solid;
          opacity: 1;
          border-radius: 50%;
          animation: ldio-jm1q7kom26f 1.639344262295082s
            cubic-bezier(0, 0.2, 0.8, 1) infinite;
        }
        .ldio-jm1q7kom26f div:nth-child(1) {
          border-color: #3be8b0;
          animation-delay: 0s;
        }
        .ldio-jm1q7kom26f div:nth-child(2) {
          border-color: #1aafd0;
          animation-delay: -0.819672131147541s;
        }
        .loadingio-spinner-ripple-m02fhe6rx7j {
          width: 31px;
          height: 31px;
          display: inline-block;
          overflow: hidden;
          background: none;
        }
        .ldio-jm1q7kom26f {
          width: 100%;
          height: 100%;
          position: relative;
          transform: translateZ(0) scale(0.31);
          backface-visibility: hidden;
          transform-origin: 0 0; /* see note above */
        }
        .ldio-jm1q7kom26f div {
          box-sizing: content-box;
        }
        /* generated by https://loading.io/ */
        paper-button {
          height: 2.5em;
        }
        .paper-button-blue {
          color: rgb(240, 248, 255);
          background: rgb(30, 144, 255);
          height: 2.5em;
        }
        .paper-button-blue:hover {
          color: rgb(240, 248, 255);
          background: rgb(65, 105, 225);
        }
        paper-button[disabled] {
          background: #e1e1e1;
        }
        textarea#release-status {
          background-color: #000000;
          color: #ffffff;
        }
        .right-right {
          display: flex;
          flex-direction: column;
          flex-grow: 1;
        }
        .middle {
          display: flex;
          flex-direction: row;
          justify-content: space-around;
        }
        .input-fields {
          display: flex;
          flex-direction: column;
          justify-content: space-between;
          margin: 20px;
        }
        .deploy-release-input {
          display: flex;
          flex-direction: column;
          flex-grow: 4;
          justify-content: space-between;
          margin: 20px;
        }
        .selectDeployment {
          display: flex;
          flex-direction: row;
          justify-content: space-around;
        }
        .dropdown-right {
          display: flex;
          flex-direction: row;
        }
        /* Style the tab */
        .tab {
          overflow: hidden;
          border: 1px solid #ccc;
          background-color: #f1f1f1;
        }

        /* Style the buttons that are used to open the tab content */
        .tab button {
          background-color: inherit;
          margin: auto;
          border: none;
          outline: none;
          cursor: pointer;
          padding: 14px 16px;
          transition: 0.3s;
        }

        /* Change background color of buttons on hover */
        .tab button:hover {
          background-color: #ddd;
        }

        /* Create an active/current tablink class */
        .tab button.active {
          background-color: #ccc;
        }

        /* Style the tab content */
        .tabcontent {
          display: none;
          padding: 6px 12px;
          border: 1px solid #ccc;
          border-top: none;
        }
        .app {
          display: flex; /* or inline-flex */
          justify-content: space-between;
          align-items: baseline;
          background-color: #ccf;
          padding: 6px 12px;
          border: 1px solid #ccf;
          border-top: none;
        }
        .app:hover {
          background-color: #e4e4ec;
        }
        .App {
          /* pointer-events: none; */
          display: flex; /* or inline-flex */
          justify-content: space-between;
          background-color: #ccffdd;
          padding: 6px 12px;
          border: 1px solid #ccfff0;
          border-top: none;
        }
        .delete_button:hover {
          color: #000000;
          background: #fa0b0b;
        }
        .retry_button:hover {
          color: #000000;
          background: #00ff55;
        }
        .release-list {
          height: 110px;
          overflow-y: scroll !important;
        }
        .textbox {
          background-color: #fff;
          color: black;
          padding: 3px;
          border-bottom: 1px #888 solid;
          display: flex;
          flex-direction: row;
        }

        .textbox input {
          border: 0px;
          background-color: #fff;
          outline: none;
          font-size: medium;
        }
        .select-release {
          outline: none;
          border: transparent solid;
          border-bottom: #8de2f1 solid;
        }
      </style>
      ${this.projectExists
        ? html`
            <div id="Deployment">
              <div class="middle" style="display:flex; padding: 20px;">
                <paper-card>
                  <div
                    class="input-fields"
                    style="flex-grow: 1;display:flex; flex-direction: column;"
                  >
                    <h4 style="text-align: center;text-decoration: underline;">
                      Release your application
                    </h4>
                    <div
                      style="display:flex; flex-direction: row; flex-grow:2;"
                    >
                      <div
                        style="display:flex; flex-direction: column; margin:20px"
                      >
                        <div>Existing Releases</div>
                        <div class="release-list">
                          <paper-listbox slot="dropdown-content">
                            ${this.applicationReleases.map(
                              (release) =>
                                html`
                                  <paper-item
                                    >${release.supplement.version}</paper-item
                                  >
                                `
                            )}
                          </paper-listbox>
                        </div>
                        <paper-button
                          @click=${(e) => {
                            this._onReloadReleaseButtonClicked();
                          }}
                          id="reload-release-button"
                        >
                          <div
                            id="indicator-release-select-release-fast"
                            style="display:none;"
                          >
                            <div
                              class="loadingio-spinner-double-ring-cs2bskerxf"
                            >
                              <div class="ldio-9k2uiavf9a">
                                <div></div>
                                <div></div>
                                <div><div></div></div>
                                <div><div></div></div>
                              </div>
                            </div>
                          </div>
                          <div id="indicator-release-select-release-slow">
                            <div
                              class="loadingio-spinner-double-ring-5186tkmre65"
                            >
                              <div class="ldio-mr7znzzkaer">
                                <div></div>
                                <div></div>
                                <div><div></div></div>
                                <div><div></div></div>
                              </div>
                            </div>
                          </div>
                        </paper-button>
                      </div>
                      <div style="display:flex;align-items:center;">
                        <div style="display:flex; flex-direction: column;">
                          <!-- <div id="version-number-div" style="display: show"> -->
                          <div
                            id="semver-number-div"
                            style="display: flex; height: 2em; margin-bottom: 0.5em"
                          >
                            <input
                              id="input-version-number-1"
                              type="number"
                              step="1"
                              min="0"
                              value="0"
                              class="input input-version-number"
                              style="width:40px"
                            />
                            <span style="margin-top: 0.85em">.</span>
                            <input
                              id="input-version-number-2"
                              type="number"
                              step="1"
                              min="0"
                              value="0"
                              class="input input-version-number"
                              style="width:40px"
                            />
                            <span style="margin-top: 0.85em">.</span>
                            <input
                              id="input-version-number-3"
                              type="number"
                              step="1"
                              min="1"
                              value="1"
                              class="input input-version-number"
                              style="width:40px"
                            />
                          </div>
                          <paper-button
                            id="button-release-button"
                            @click=${(e) => {
                              this._onReleaseApplicationButtonClicked(
                                "release-button"
                              );
                            }}
                            class="paper-button-blue"
                          >
                            <div id="text-release-button">Release</div>
                            <div
                              id="indicator-release-button"
                              style="display:none;"
                            >
                              <div
                                class="loadingio-spinner-bean-eater-utpibgxvbxi"
                              >
                                <div class="ldio-yaqjmggu7z">
                                  <div>
                                    <div></div>
                                    <div></div>
                                    <div></div>
                                  </div>
                                  <div>
                                    <div></div>
                                    <div></div>
                                    <div></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </paper-button>
                        </div>
                      </div>
                    </div>
                    <div>
                      <div
                        class="form-group"
                        style="margin-left: 4px; margin-right: 4px; margin-top: 4px; height: 150px"
                      >
                        <input
                          type="text"
                          class="form-control"
                          id="status"
                          style="width: 100%; display:none"
                          placeholder="Status.."
                          readonly
                        />
                        <br />
                        <textarea
                          id="release-status"
                          style="width: 100%; display:none"
                          class="form-control"
                          readonly
                        ></textarea>
                      </div>
                    </div>
                  </div>
                </paper-card>
                <paper-card>
                  <div class="deploy-release-input">
                    <h4 style="text-align: center; text-decoration: underline;">
                      Deploy a release
                    </h4>

                    <div>
                      <div
                        style="margin-right:20px; align-items: center; display: flex; flex-direction: row; align-content: center;"
                      >
                        Selected Release:
                        <div>
                          <select id="select-release" class="select-release">
                            <option value="-1">none</option>
                            ${this.applicationReleases.map(
                              (release) =>
                                html`
                                  <option>${release.supplement.version}</option>
                                `
                            )}
                          </select>
                        </div>
                        <paper-button
                          @click=${(e) => {
                            this._onReloadDeployButtonClicked();
                          }}
                          id="reload-deployment-button"
                        >
                          <div
                            id="indicator-select-release-fast"
                            style="display:none;"
                          >
                            <div
                              class="loadingio-spinner-double-ring-cs2bskerxf"
                            >
                              <div class="ldio-9k2uiavf9a">
                                <div></div>
                                <div></div>
                                <div><div></div></div>
                                <div><div></div></div>
                              </div>
                            </div>
                          </div>
                          <div id="indicator-select-release-slow">
                            <div
                              class="loadingio-spinner-double-ring-5186tkmre65"
                            >
                              <div class="ldio-mr7znzzkaer">
                                <div></div>
                                <div></div>
                                <div><div></div></div>
                                <div><div></div></div>
                              </div>
                            </div>
                          </div>
                        </paper-button>
                      </div>
                      <div
                        style="display:flex; flex-direction: column; flex-grow: 4;"
                      >
                        <div
                          style="display:flex; flex-direction: column; margin-bottom: 20px"
                        >
                          Name
                          <span
                            class="textbox"
                            style="column-span: all; word-break: break-all; width:25rem"
                          >
                            <div style="display: flex;flex-direction: row;">
                              <div style="flex-shrink:1">
                                ${this.namePrefixDefaultValue}-
                              </div>

                              <input
                                id="nameDefaultValue"
                                type="text"
                                @input="${this.nameDefaultValueInput}"
                                .value="${this.nameDefaultValue}"
                                style="flex-grow:1"
                              />
                            </div>
                          </span>
                        </div>
                        <div
                          style="display:flex; flex-direction: column; margin-bottom: 30px"
                        >
                          URL
                          <paper-span
                            class="textbox"
                            style="column-span: all; word-break: break-all; width:25rem"
                          >
                            <div>
                              ${this.urlPrefixDefaultValue}${this
                                .namePrefixDefaultValue}-${this
                                .nameDefaultValue}
                              <input
                                type="text"
                                id="urlDefaultValue"
                                type="text"
                                @input="${this.urlDefaultValueInput}"
                                .value="${this.urlDefaultValue}"
                              />
                            </div>
                          </paper-span>
                        </div>
                      </div>
                    </div>
                    <paper-button
                      id="button-deployment-button"
                      @click=${(e) => {
                        this._onDeployReleaseButtonClicked("deployment-button");
                      }}
                      class="paper-button-blue"
                      ?disabled=${true}
                    >
                      <div id="text-deployment-button">Deploy your release</div>

                      <div
                        id="indicator-deployment-button"
                        style="display:none;"
                      >
                        <div class="loadingio-spinner-ripple-m02fhe6rx7j">
                          <div class="ldio-jm1q7kom26f">
                            <div></div>
                            <div></div>
                          </div>
                        </div>
                      </div>
                    </paper-button>
                    <div
                      id="open-deployment-button"
                      style="align-self: center; margin: 20px; display: none;"
                    >
                      <paper-button
                        class="paper-button-blue"
                        @click=${(e) => {
                          this._onOpenAppClicked(
                            this.urlPrefixDefaultValue +
                              this.namePrefixDefaultValue +
                              "-" +
                              this.nameDefaultValue
                          );
                        }}
                      >
                        Open Application
                      </paper-button>
                    </div>
                    <div
                      style="align-items: center; display: flex; flex-direction: column; padding-top: 20px;"
                    >
                      <details
                        id="auto-details-node"
                        style="outline:none; width: 100%;"
                        @click=${(e) => {
                          this.shadowRoot.getElementById(
                            "manual-details-node"
                          ).open = false;
                        }}
                      >
                        <summary style="outline:none">
                          Select existing Bootstrap
                        </summary>
                        <ul
                          id="ss_elem_list"
                          aria-labelledby="id"
                          style="height:100px; overflow:hidden; overflow-y:scroll; outline:none;"
                        >
                          ${this.availableBootstrapNodes.map(
                            (node) => html`
                              <li
                                class="bootstrap-node"
                                id=${node.clusterName}
                                @click=${(e) => {
                                  this.onBootstrapNodeClicked(node);
                                }}
                              >
                                ${node.clusterName}
                              </li>
                            `
                          )}
                        </ul>
                      </details>
                      <span> --------------or-------------- </span>
                      <details
                        id="manual-details-node"
                        style="outline:none; width: 100%;"
                        @click=${(e) => {
                          this.shadowRoot.getElementById(
                            "auto-details-node"
                          ).open = false;
                        }}
                      >
                        <summary style="outline:none">
                          Enter manually IP and Port
                        </summary>
                        <span class="textbox">
                          <input
                            style="flex:1;"
                            type="text"
                            id="bootstrapNodeURL"
                            @input="${this.bootstrapNodeURLInput}"
                            .value="${this.bootstrapNodeURL}"
                          />
                          <input
                            style="background-color: #dcdcdc; width:20%"
                            type="number"
                            id="bootstrapNodePort"
                            @input="${this.bootstrapNodePortInput}"
                            .value="${this.bootstrapNodePort}"
                          />
                        </span>
                      </details>
                    </div>
                  </div>
                </paper-card>
              </div>
            </div>
            <paper-toast id="toast" text="Will be changed later."></paper-toast>
          `
        : html`<div
            style="width:100%; display:flex; flex-direction: column; justify-content:center; align-items:center;"
          >
            <h1>Verifying if Project exists</h1>
            <div class="loadingio-spinner-blocks-uf65m2tnfnj">
              <div class="ldio-8suw7sf2g6i">
                <div
                  style="left:23.209999999999997px;top:23.209999999999997px;animation-delay:0s"
                ></div>
                <div
                  style="left:80.17999999999999px;top:23.209999999999997px;animation-delay:0.13440860215053763s"
                ></div>
                <div
                  style="left:137.15px;top:23.209999999999997px;animation-delay:0.26881720430107525s"
                ></div>
                <div
                  style="left:23.209999999999997px;top:80.17999999999999px;animation-delay:0.9408602150537634s"
                ></div>
                <div
                  style="left:137.15px;top:80.17999999999999px;animation-delay:0.4032258064516129s"
                ></div>
                <div
                  style="left:23.209999999999997px;top:137.15px;animation-delay:0.8064516129032258s"
                ></div>
                <div
                  style="left:80.17999999999999px;top:137.15px;animation-delay:0.6720430107526881s"
                ></div>
                <div
                  style="left:137.15px;top:137.15px;animation-delay:0.5376344086021505s"
                ></div>
              </div>
            </div>
          </div>`}
    `;
  }

  //
  // Define used global values
  //
  static get properties() {
    return {
      applicationName: {
        type: String,
      },
      applicationId: {
        type: String,
      },
      releaseStatus: {
        type: String,
      },
      deploymentStatus: {
        type: String,
      },
      nameDefaultValue: {
        type: String,
      },
      urlPrefixDefaultValue: {
        type: String,
      },
      urlDefaultValue: {
        type: String,
      },
      applicationReleases: {
        type: Array,
      },
      availableBootstrapNodes: {
        type: Array,
      },
      selectedBootstrapNode: {
        type: Object,
      },
      projectExists: {
        type: Boolean,
      },
      bootstrapNodeURL: {
        type: Object,
      },
      bootstrapNodePort: {
        type: Object,
      },
      selectedReleaseVersion: {
        type: String,
      },
      highestApplicationReleaseVersion: {
        type: String,
      },
      projectUsers: {
        type: Object,
      },
      projectName: {
        type: Object,
      },
      wordList: {
        type: Array,
      },
      versionNumber1: {
        type: String,
      },
      versionNumber2: {
        type: String,
      },
      versionNumber3: {
        type: String,
      },
      map: {
        type: String,
        observer: "_activeChanged",
      },
      y: {
        type: Object,
      },
    };
  }

  constructor() {
    super();
    this.setupYJS(this);
    this.setupDefaultValues();
  }
  setupYJS(self) {
    var pathname = window.location.pathname.split("/");
    Y({
      db: {
        name: "memory",
      },
      connector: {
        name: "websockets-client",
        room: pathname[pathname.length - 1],
        options: { resource: Static.YjsResourcePath },
        url: Static.YjsAddress,
      },
      share: {
        map: "Map",
        data: "Map",
      },
    }).then(function (y) {
      self.y = y;

      /// nameDefaultValue
      if (y.share.data.get("nameDefaultValue") == undefined) {
        y.share.data.set("nameDefaultValue", self.nameDefaultValue);
      } else {
        self.nameDefaultValue = y.share.data.get("nameDefaultValue");
      }
      /// urlDefaultValue
      if (y.share.data.get("urlDefaultValue") == undefined) {
        y.share.data.set("urlDefaultValue", self.urlDefaultValue);
      } else {
        self.urlDefaultValue = y.share.data.get("urlDefaultValue");
      }
      // deploymentStatus
      if (y.share.data.get("deploymentStatus") == undefined) {
        y.share.data.set("deploymentStatus", self.deploymentStatus);
      } else {
        self.deploymentStatus = y.share.data.get("deploymentStatus");
        self.pollDeploymentJobConsoleText(
          self.deploymentStatus,
          "deployment-button"
        );
      }
      // releaseStatus
      if (y.share.data.get("releaseStatus") == undefined) {
        y.share.data.set("releaseStatus", self.releaseStatus);
      } else {
        self.releaseStatus = y.share.data.get("releaseStatus");
        self.pollJobConsoleText(self.releaseStatus, "release-button");
      }

      y.share.data.observe((event) => {
        if (event.name == "urlDefaultValue") {
          if (event.value != event.oldValue) {
            self.updateDefaultValue(event.value, "urlDefaultValue");
          }
        } else if (event.name == "nameDefaultValue") {
          if (event.value != event.oldValue) {
            self.updateDefaultValue(event.value, "nameDefaultValue");
          }
        } else if (event.name == "deploymentStatus") {
          if (event.value != event.oldValue) {
            self.updateDefaultValue(event.value, "deploymentStatus");
          }
        } else if (event.name == "releaseStatus") {
          if (event.value != event.oldValue) {
            self.updateDefaultValue(event.value, "releaseStatus");
          }
        }
      });
    });
  }

  setupDefaultValues() {
    this._getAvailableBootstrapNodes();
    this.getProjectInfoAndCheckIfProjectExists();

    this.wordList = this.returnWordList();
    this.applicationReleases = [];

    this.nameDefaultValue =
      this.wordList[Math.floor(Math.random() * this.wordList.length)] +
      "-" +
      this.wordList[Math.floor(Math.random() * this.wordList.length)];

    this.urlDefaultValue = "";
    this.urlPrefixDefaultValue =
      "https://mentoring.tech4comp.dbis.rwth-aachen.de/mydeployment/";

    this.highestApplicationReleaseVersion = "0.0.0";
    this.versionNumber1 = "0";
    this.versionNumber2 = "0";
    this.versionNumber3 = "1";

    this.releaseStatus = null;
    this.deploymentStatus = null;

    this.bootstrapNodeURL = "137.226.107.63";
  }
  updated() {
    var self = this;
    this.shadowRoot
      .getElementById("select-release")
      .addEventListener("change", function () {
        self._onReleaseToDeployClicked(this.selectedIndex, this.value);
      });
  }
  //
  // Handle YJS data flow
  //
  nameDefaultValueInput() {
    var temp = this.shadowRoot.getElementById("nameDefaultValue");
    this.y.share.data.set("nameDefaultValue", temp.value);
  }
  bootstrapNodePortInput() {
    var temp = this.shadowRoot.getElementById("bootstrapNodePort");
    this.bootstrapNodePort = temp.value;
    // this.y.share.data.set("urlDefaultValue", temp.value);
  }
  bootstrapNodeURLInput() {
    var temp = this.shadowRoot.getElementById("bootstrapNodeURL");
    this.bootstrapNodeURL = temp.value;
    // this.y.share.data.set("urlDefaultValue", temp.value);
  }
  urlDefaultValueInput() {
    var temp = this.shadowRoot.getElementById("urlDefaultValue");
    this.y.share.data.set("urlDefaultValue", temp.value);
  }
  setReleaseQueueId(data) {
    this.y.share.data.set("releaseStatus", data);
  }
  setDeploymentQueueId(data) {
    this.y.share.data.set("deploymentStatus", data);
  }
  updateDefaultValue(newDefaultValue, defaultValue) {
    switch (defaultValue) {
      case "portDefaultValue":
        this.portDefaultValue = newDefaultValue;
        this.requestUpdate("newDefaultValue", newDefaultValue);
        break;
      case "nameDefaultValue":
        this.nameDefaultValue = newDefaultValue;
        this.requestUpdate("newDefaultValue", newDefaultValue);
        break;
      case "urlDefaultValue":
        this.urlDefaultValue = newDefaultValue;
        this.requestUpdate("newDefaultValue", newDefaultValue);
        break;
      case "releaseStatus":
        this.releaseStatus = newDefaultValue;
        this.requestUpdate("releaseStatus", newDefaultValue);
        if (this.releaseStatus != null) {
          this.pollJobConsoleText(this.releaseStatus, "release-button");
        }
        break;
      case "deploymentStatus":
        this.deploymentStatus = newDefaultValue;
        this.requestUpdate("deploymentStatus", newDefaultValue);
        if (this.deploymentStatus != null) {
          this.pollDeploymentJobConsoleText(
            this.deploymentStatus,
            "deployment-button"
          );
        }
        break;
      default:
        break;
    }
  }

  //
  // Helper functions
  //
  _onReleaseToDeployClicked(index, value) {
    if (index > 0) {
      this.selectedReleaseVersion = value;
      this.setDeployButtonSelectable("deployment-button");
      this.requestUpdate();
    } else {
      this.setDeployButtonNeutral("deployment-button");
      this.requestUpdate();
    }
  }
  _onReloadReleaseButtonClicked() {
    this.setReleaseButtonNeutral("release-button");
    var fastIndicator = this.shadowRoot.getElementById(
      "indicator-release-select-release-fast"
    );
    var slowIndicator = this.shadowRoot.getElementById(
      "indicator-release-select-release-slow"
    );

    fastIndicator.style.display = "block";
    slowIndicator.style.display = "none";

    setTimeout(function () {
      fastIndicator.style.display = "none";
      slowIndicator.style.display = "block";
    }, 1000);

    this._getReleasesOfApplication();
  }
  _onReloadDeployButtonClicked() {
    this.setDeployButtonNeutral("deployment-button");
    var fastIndicator = this.shadowRoot.getElementById(
      "indicator-select-release-fast"
    );
    var slowIndicator = this.shadowRoot.getElementById(
      "indicator-select-release-slow"
    );

    fastIndicator.style.display = "block";
    slowIndicator.style.display = "none";

    setTimeout(function () {
      fastIndicator.style.display = "none";
      slowIndicator.style.display = "block";
    }, 1000);

    this._getReleasesOfApplication();
  }
  onBootstrapNodeClicked(selectedNode) {
    var allNodes = this.shadowRoot.querySelectorAll(
      `[class*="bootstrap-node"]`
    );

    allNodes.forEach((node) => {
      node.style = "";
    });
    var clickedBootstrapNode = this.shadowRoot.getElementById(
      selectedNode.clusterName
    );
    clickedBootstrapNode.style =
      "border: rgb(175 249 228) solid; border-radius: 10px;";
    this.selectedBootstrapNode = selectedNode;
  }
  _onOpenAppClicked(link) {
    window.open(link, "_blank");
  }
  getDeploymentButton() {
    return this.shadowRoot.getElementById("button-deployment-button");
  }

  getVersionNumberInput(part) {
    return this.shadowRoot.getElementById("input-version-number-" + part);
  }

  setEnteredVersion(major, minor, patch) {
    this.getVersionNumberInput(1).value = major;
    this.getVersionNumberInput(2).value = minor;
    this.getVersionNumberInput(3).value = patch;
  }

  getVersion() {
    return (
      this.getVersionNumberInput(1).value +
      "." +
      this.getVersionNumberInput(2).value +
      "." +
      this.getVersionNumberInput(3).value
    );
  }
  _toHumanDate(epochSeconds) {
    return new Date(epochSeconds * 1000).toLocaleString();
  }
  //
  // Get all deployment to show as potential bootstrap nodes
  //

  async _getAvailableBootstrapNodes() {
    var deployments = [];
    this.availableBootstrapNodes = [];
    await fetch(Static.RegistryURL + "/las2peer/services/deployments", {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        deployments = data;
      });
    Object.keys(deployments).forEach((release) => {
      deployments[release].forEach((deployment) => {
        if (deployment.type == "cae-application") {
          this.availableBootstrapNodes.push(deployment);
        }
      });
    });
  }
  // Get all release of CAE application to show as list
  //
  async _getReleasesOfApplication() {
    var allServices = [];
    var releaseVersions = [];
    this.applicationReleases = [];
    await fetch(Static.RegistryURL + "/las2peer/services/services", {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        allServices = data;
      });
    await allServices.forEach((service) => {
      Object.keys(service.releases).forEach((releaseVersion) => {
        if (
          service.releases[releaseVersion].supplement.name ==
          this.cleanFormatString("cae-app-" + this.projectName) &&
          service.releases[releaseVersion].supplement.id ==
            this.applicationId &&
          service.releases[releaseVersion].supplement.type == "cae-application"
        ) {
          releaseVersions.push(releaseVersion);
          this.applicationReleases.push(service.releases[releaseVersion]);
        }
      });
    });
    for (let i = 0; i < this.applicationReleases.length; i++) {
      for (let j = 0; j < this.applicationReleases.length - i - 1; j++) {
        if (
          gt(
            this.applicationReleases[j + 1].supplement.version,
            this.applicationReleases[j].supplement.version
          )
        ) {
          [this.applicationReleases[j + 1], this.applicationReleases[j]] = [
            this.applicationReleases[j],
            this.applicationReleases[j + 1],
          ];
        }
      }
    }
    releaseVersions.forEach((version) => {
      if (gt(version, this.highestApplicationReleaseVersion)) {
        this.highestApplicationReleaseVersion = version;
      }
    });
    var highestVersion = this.highestApplicationReleaseVersion.split(".");
    this.setEnteredVersion(
      highestVersion[0],
      highestVersion[1],
      highestVersion[2]
    );
    this.requestUpdate();
  }

  async checkIfNameAvailable() {
    this.setCheckNameAvailable();
    var services = [];
    await fetch(Static.RegistryURL + "/las2peer/services/services", {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        services = data;
      });
    var nameAvailable = true;
    await services.forEach((service) => {
      if (
        service.name.normalize() ==
        (
          this.namePrefixDefaultValue.normalize() +
          this.nameDefaultValue.normalize()
        ).normalize()
      ) {
        nameAvailable = false;
      }
    });
    return nameAvailable;
  }

  //
  //
  //
  //
  // Called when deploying a new CAE deployment of an existing release
  //
  //
  //
  //
  async _onDeployReleaseButtonClicked(buttonId) {
    var deployNameAvailable = true;
    deployNameAvailable = await this.checkIfDeploymentNameAvailable();

    if (deployNameAvailable == true) {
      if (this.shadowRoot.getElementById("auto-details-node").open) {
        // Get selected bootstrap node
        this._sendDeploymentRequest(
          "DeployToCluster",
          buttonId,
          this.selectedBootstrapNode.clusterName
        );
      } else if (this.shadowRoot.getElementById("manual-details-node").open) {
        // Get entered information for bootstrap node
        if (
          /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(
            this.bootstrapNodeURL
          )
        ) {
          if (
            /^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/.test(
              this.bootstrapNodePort
            )
          ) {
            var ipAndPort =
              this.bootstrapNodeURL + ":" + this.bootstrapNodePort;
            this._sendDeploymentRequest("DeployToCluster", buttonId, ipAndPort);
          } else {
            this.showToast("Your Port address is invalid");
          }
        } else {
          this.showToast("Your IP address is invalid");
        }
      } else {
        this._sendDeploymentRequest("DeployToCluster", buttonId, "");
      }
    } else {
      this.showToast("Name already taken, choose another one");
    }
  }

  // Check if name of deployment is not already taken, as in namespace unique names of deployments needed
  async checkIfDeploymentNameAvailable() {
    var deployments = [];
    await fetch(Static.RegistryURL + "/las2peer/services/deployments", {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        deployments = data;
      });
    var nameAvailable = true;
    Object.keys(deployments).forEach((release) => {
      deployments[release].forEach((deployment) => {
        if (
          deployment.clusterName.normalize() ==
          this.namePrefixDefaultValue.normalize() +
            "-" +
            this.nameDefaultValue.normalize()
        ) {
          nameAvailable = false;
        }
      });
    });
    return nameAvailable;
  }

  async _sendDeploymentRequest(jobAlias, buttonId, bootstrapNode) {
    var id = await this._getReleaseProjectId(this.namePrefixDefaultValue);
    if (!id) {
      this.showToast("Error getting project id");
    } else {
      var clusterName =
        this.namePrefixDefaultValue + "-" + this.nameDefaultValue;
      var validName = /^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$/.test(
        clusterName
      );
      if (validName == false) {
        this.showToast("Name invalid, only use low letters and -, _ if needed");
      } else {
        this.setDeployButtonLoading(buttonId);
        var deploymentData = {};
        deploymentData["id"] = String(id);
        deploymentData["name"] = this.cleanFormatString(this.namePrefixDefaultValue);
        deploymentData["clusterName"] = this.cleanFormatString(clusterName);
        deploymentData["version"] = this.selectedReleaseVersion;
        deploymentData["type"] = "cae-application";
        deploymentData["link"] = this.cleanFormatString(
          this.urlPrefixDefaultValue +
            this.namePrefixDefaultValue +
            "-" +
            this.nameDefaultValue
        );
        deploymentData["bootstrap"] = String(bootstrapNode);
        fetch(
          Static.ModelPersistenceServiceURL +
            "/deploy/" +
            String(id) +
            "/" +
            jobAlias,
          {
            method: "POST",
            body: `${JSON.stringify(deploymentData)}`,
          }
        )
          .then((response) => {
            if (response.status == "200") {
              this.setDeployButtonLoading(buttonId);
              return response.text();
            } else {
              throw new Error(response.status);
            }
          })
          .then((data) => {
            if (data.startsWith("/queue")) {
              this.setDeploymentQueueId(data);
              this.pollDeploymentJobConsoleText(data, buttonId);
            } else {
              throw new Error("Got no queue id");
            }
          })
          .catch((e) => {
            this.setDeployButtonError(buttonId);
            this.showToast(e);
          });
      }
    }
  }

  async _getReleaseProjectId(cae_application_name) {
    var projectId;
    var services = [];
    await fetch(Static.RegistryURL + "/las2peer/services/services", {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        services = data;
      });

    services.forEach((service) => {
      Object.keys(service.releases).forEach((releaseVersion) => {
        if (
          service.releases[releaseVersion].supplement.type ==
            "cae-application" &&
          service.releases[releaseVersion].supplement.name ==
            cae_application_name
        ) {
          projectId = service.releases[releaseVersion].supplement.id;
        }
      });
    });
    return projectId;
  }

  pollDeploymentJobConsoleText(location, buttonId) {
    setTimeout(
      function () {
        this.getDeploymentJobConsoleText(location, buttonId);
      }.bind(this),
      1000
    );
  }
  getDeploymentJobConsoleText(queueItem, buttonId) {
    fetch(
      Static.ModelPersistenceServiceURL +
        "/deployStatus?queueItem=" +
        queueItem,
      {
        method: "GET",
      }
    )
      .then((response) => {
        if (response.status != 200) {
          throw new Error(response.status);
        } else {
          return response.text();
        }
      })
      .then((data) => {
        if (data.indexOf("Pending") > -1) {
          this.setDeployButtonLoading(buttonId);
          this.pollDeploymentJobConsoleText(queueItem, buttonId);
        } else if (data.indexOf("Done") > -1) {
          this.setDeployButtonNeutral(buttonId);
          this.setDeployButtonDone(buttonId);
        } else if (data.indexOf("Finished: SUCCESS") > -1) {
          this.setDeployButtonDone(buttonId);
        } else if (data.indexOf("Error: Hash mismatch") > -1) {
          this.setDeployButtonHashError(buttonId);
        } else if (data.indexOf("Finished: FAILURE") > -1) {
          this.setDeployButtonError(buttonId);
        } else {
          this.setDeployButtonLoading(buttonId);
          this.pollDeploymentJobConsoleText(queueItem, buttonId);
        }
      })
      .catch((e) => {
        this.setDeployButtonError(buttonId);
      });
  }

  setDeployButtonNeutral(buttonId) {
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var reloadDeployButton = this.shadowRoot.getElementById(
      "reload-" + buttonId
    );
    var openDeploymentButton = this.shadowRoot.getElementById(
      "open-deployment-button"
    );
    var selectReleaseDropdown = this.shadowRoot.getElementById(
      "select-release"
    );
    var nameInput = this.shadowRoot.getElementById("nameDefaultValue");

    deployButton.disabled = true;
    deployButtonText.innerText = "DEPLOY YOUR RELEASE";
    deployButton.style = "background: #e1e1e1;";

    indicatorDeployButton.style = "display:none;";
    indicatorDeployButton.disabled = true;
    this.setDeploymentQueueId(null);

    reloadDeployButton.disabled = false;

    openDeploymentButton.style.display = "none";

    selectReleaseDropdown.disabled = false;

    nameInput.disabled = false;
  }

  setDeployButtonSelectable(buttonId) {
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var reloadDeployButton = this.shadowRoot.getElementById(
      "reload-" + buttonId
    );
    var openDeploymentButton = this.shadowRoot.getElementById(
      "open-deployment-button"
    );
    var selectReleaseDropdown = this.shadowRoot.getElementById(
      "select-release"
    );
    var nameInput = this.shadowRoot.getElementById("nameDefaultValue");

    deployButton.disabled = false;
    deployButtonText.innerText = "DEPLOY YOUR RELEASE";
    deployButton.style = "background: rgb(30, 144, 255);";

    indicatorDeployButton.style = "display:none;";
    indicatorDeployButton.disabled = true;
    this.setDeploymentQueueId(null);

    reloadDeployButton.disabled = false;

    openDeploymentButton.style.display = "none";

    selectReleaseDropdown.disabled = false;

    nameInput.disabled = false;
  }

  setDeployButtonLoading(buttonId) {
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var reloadDeployButton = this.shadowRoot.getElementById(
      "reload-" + buttonId
    );
    var openDeploymentButton = this.shadowRoot.getElementById(
      "open-deployment-button"
    );
    var selectReleaseDropdown = this.shadowRoot.getElementById(
      "select-release"
    );
    var nameInput = this.shadowRoot.getElementById("nameDefaultValue");

    deployButton.disabled = true;
    deployButton.style = "background:rgb(160, 73, 134);";
    deployButtonText.innerText = "Deploying";

    indicatorDeployButton.style = "display:block;";
    indicatorDeployButton.disabled = true;

    reloadDeployButton.disabled = true;

    openDeploymentButton.style.display = "none";

    selectReleaseDropdown.disabled = true;

    nameInput.disabled = true;
  }

  setDeployButtonDone(buttonId) {
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var openDeploymentButton = this.shadowRoot.getElementById(
      "open-deployment-button"
    );
    var reloadDeployButton = this.shadowRoot.getElementById(
      "reload-" + buttonId
    );
    var selectReleaseDropdown = this.shadowRoot.getElementById(
      "select-release"
    );
    var nameInput = this.shadowRoot.getElementById("nameDefaultValue");

    deployButton.disabled = true;
    deployButtonText.innerText = "Deployed";
    deployButton.style = "background: rgb(73, 160, 80);";

    indicatorDeployButton.style = "display:none;";
    indicatorDeployButton.disabled = false;

    openDeploymentButton.style =
      "align-self: center; margin: 20px; display:block;";
    this.setDeploymentQueueId(null);

    reloadDeployButton.disabled = false;

    selectReleaseDropdown.disabled = true;

    nameInput.disabled = true;
  }

  setDeployButtonError(buttonId) {
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var reloadDeployButton = this.shadowRoot.getElementById(
      "reload-" + buttonId
    );
    var openDeploymentButton = this.shadowRoot.getElementById(
      "open-deployment-button"
    );
    var selectReleaseDropdown = this.shadowRoot.getElementById(
      "select-release"
    );
    var nameInput = this.shadowRoot.getElementById("nameDefaultValue");

    deployButton.disabled = true;
    deployButtonText.innerText = "Error";
    deployButton.style = "background: rgb(193, 77, 77);";

    indicatorDeployButton.style = "display:none;";
    indicatorDeployButton.disabled = false;
    this.setDeploymentQueueId(null);

    reloadDeployButton.disabled = false;

    openDeploymentButton.style.display = "none";

    selectReleaseDropdown.disabled = false;

    nameInput.disabled = false;
  }

  setDeployButtonHashError(buttonId) {
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var openDeploymentButton = this.shadowRoot.getElementById(
      "open-deployment-button"
    );
    var selectReleaseDropdown = this.shadowRoot.getElementById(
      "select-release"
    );
    var nameInput = this.shadowRoot.getElementById("nameDefaultValue");

    deployButton.disabled = true;
    deployButtonText.innerText = "Hash mismatch";
    deployButton.style = "background: rgb(193, 77, 77);";

    indicatorDeployButton.style = "display:none;";
    indicatorDeployButton.disabled = false;
    this.setDeploymentQueueId(null);
    this.showToast(
      "Hash of original release seems to be modified, hackers might try to harm you, deployment aborted"
    );

    reloadDeployButton.disabled = false;

    openDeploymentButton.style.display = "none";

    selectReleaseDropdown.disabled = false;

    nameInput.disabled = false;
  }

  //
  //
  //
  //
  // Functions called when releasing a new version of CAE application
  //
  //
  //
  //
  async _onReleaseApplicationButtonClicked(buttonId) {
    var releaseNameAvailable = true;
    // TODO Check if group authorized to release this application
    var versionValid = true;
    versionValid = await this.checkIfVersionValid();

    if (versionValid == true) {
      // send deploy request
      this.releaseRequest("Build", buttonId);
    } else {
    }
  }

  releaseRequest(jobAlias, buttonId) {
    var pathname = window.location.pathname.split("/");
    var aut = Auth.getAuthHeader()["Authorization"].split(" ")[1];
    this.setReleaseButtonLoading(buttonId);
    var deploymentData = {};
    deploymentData["id"] = pathname[pathname.length - 1];
    deploymentData["name"] = this.cleanFormatString(this.namePrefixDefaultValue);
    deploymentData["Authorization"] = aut;
    deploymentData["version"] = this.getVersion();
    deploymentData["type"] = "cae-application";
    deploymentData["users"] = this.projectUsers;
    deploymentData["groupId"] = this.cleanFormatString(this.projectName);
    fetch(
      Static.ModelPersistenceServiceURL +
        "/deploy/" +
        pathname[pathname.length - 1] +
        "/" +
        jobAlias,
      {
        method: "POST",
        body: `${JSON.stringify(deploymentData)}`,
      }
    )
      .then((response) => {
        if (response.status == "200") {
          return response.text();
        } else {
          throw new Error(response.status);
        }
      })
      .then((queueId) => {
        if (queueId.indexOf("Error") > -1) {
          throw new Error(response.status);
        } else {
          this.setReleaseQueueId(queueId);
          this.pollJobConsoleText(queueId, buttonId);
        }
      })
      .catch((e) => {
        this.setReleaseButtonError(buttonId);
      });
  }

  pollJobConsoleText(location, buttonId) {
    setTimeout(
      function () {
        this.getJobConsoleText(location, buttonId);
      }.bind(this),
      1000
    );
  }

  getJobConsoleText(queueItem, buttonId) {
    fetch(
      Static.ModelPersistenceServiceURL +
        "/deployStatus?queueItem=" +
        queueItem,
      {
        method: "GET",
      }
    )
      .then((response) => {
        if (response.status == 200) {
          return response.text();
        } else {
          throw new Error(response.status);
        }
      })
      .then((data) => {
        this.addLogs(data);
        if (data.indexOf("Pending") > -1) {
          this.setReleaseButtonLoading(buttonId);
          this.pollJobConsoleText(queueItem, buttonId);
        } else if (data.indexOf("Done") > -1) {
          this.setReleaseButtonNeutral(buttonId);
        } else if (data.indexOf("Finished: SUCCESS") > -1) {
          this.setReleaseButtonDone(buttonId);
        } else if (data.indexOf("Finished: FAILURE") > -1) {
          this.setReleaseButtonError(buttonId);
        } else {
          this.setReleaseButtonLoading(buttonId);
          this.pollJobConsoleText(queueItem, buttonId);
        }
      })
      .catch((e) => {
        this.setReleaseButtonError(buttonId);
      });
  }
  addLogs(logs) {
    this.getReleaseStatusTextarea().value = logs;
  }
  setReleaseButtonNeutral(buttonId) {
    var releaseButton = this.shadowRoot.getElementById("button-" + buttonId);
    var releaseButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorReleaseButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var inputVersionNumber1 = this.shadowRoot.getElementById(
      "input-version-number-1"
    );
    var inputVersionNumber2 = this.shadowRoot.getElementById(
      "input-version-number-2"
    );
    var inputVersionNumber3 = this.shadowRoot.getElementById(
      "input-version-number-3"
    );
    var reloadReleaseButton = this.shadowRoot.getElementById(
      "reload-release-button"
    );

    inputVersionNumber1.disabled = false;
    inputVersionNumber2.disabled = false;
    inputVersionNumber3.disabled = false;

    releaseButton.disabled = false;
    releaseButton.style = "background:rgb(30, 144, 255);";
    releaseButtonText.innerText = "Release";

    indicatorReleaseButton.style = "display:none;";
    indicatorReleaseButton.disabled = false;

    this.getStatusInput().style = "width: 100%; display:none;";
    this.getStatusInput().value = "Released";
    this.getReleaseStatusTextarea().style = "width: 100%; display:none;";

    reloadReleaseButton.disabled = false;
  }

  setReleaseButtonLoading(buttonId) {
    var releaseButton = this.shadowRoot.getElementById("button-" + buttonId);
    var releaseButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorReleaseButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var inputVersionNumber1 = this.shadowRoot.getElementById(
      "input-version-number-1"
    );
    var inputVersionNumber2 = this.shadowRoot.getElementById(
      "input-version-number-2"
    );
    var inputVersionNumber3 = this.shadowRoot.getElementById(
      "input-version-number-3"
    );
    var reloadReleaseButton = this.shadowRoot.getElementById(
      "reload-release-button"
    );

    inputVersionNumber1.disabled = true;
    inputVersionNumber2.disabled = true;
    inputVersionNumber3.disabled = true;

    releaseButton.disabled = true;
    releaseButton.style = "background:rgb(160, 73, 134);";
    releaseButtonText.innerText = "Releasing";

    indicatorReleaseButton.style = "display:block;";
    indicatorReleaseButton.disabled = true;

    this.getStatusInput().style = "width: 100%; display:block;";
    this.getStatusInput().value = "Releasing CAE application ...";
    this.getReleaseStatusTextarea().style = "width: 100%; display:block;";

    reloadReleaseButton.disabled = true;
  }

  setReleaseButtonDone(buttonId) {
    var releaseButton = this.shadowRoot.getElementById("button-" + buttonId);
    var releaseButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorReleaseButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var inputVersionNumber1 = this.shadowRoot.getElementById(
      "input-version-number-1"
    );
    var inputVersionNumber2 = this.shadowRoot.getElementById(
      "input-version-number-2"
    );
    var inputVersionNumber3 = this.shadowRoot.getElementById(
      "input-version-number-3"
    );
    var reloadReleaseButton = this.shadowRoot.getElementById(
      "reload-release-button"
    );

    inputVersionNumber1.disabled = false;
    inputVersionNumber2.disabled = false;
    inputVersionNumber3.disabled = false;

    releaseButton.disabled = true;
    releaseButtonText.innerText = "Released";
    releaseButton.style = "background: rgb(73, 160, 80);";

    indicatorReleaseButton.style = "display:none;";
    indicatorReleaseButton.disabled = false;
    this.getStatusInput().style = "width: 100%; display:none;";
    this.getStatusInput().value = "Released";
    this.getReleaseStatusTextarea().style = "width: 100%; display:none;";
    this.setReleaseQueueId(null);

    reloadReleaseButton.disabled = false;
  }

  setReleaseButtonError(buttonId) {
    var releaseButton = this.shadowRoot.getElementById("button-" + buttonId);
    var releaseButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorReleaseButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var inputVersionNumber1 = this.shadowRoot.getElementById(
      "input-version-number-1"
    );
    var inputVersionNumber2 = this.shadowRoot.getElementById(
      "input-version-number-2"
    );
    var inputVersionNumber3 = this.shadowRoot.getElementById(
      "input-version-number-3"
    );
    var reloadReleaseButton = this.shadowRoot.getElementById(
      "reload-release-button"
    );

    inputVersionNumber1.disabled = false;
    inputVersionNumber2.disabled = false;
    inputVersionNumber3.disabled = false;

    releaseButton.disabled = true;
    releaseButtonText.innerText = "Error";
    releaseButton.style = "background: rgb(193, 77, 77);";

    indicatorReleaseButton.style = "display:none;";
    indicatorReleaseButton.disabled = false;
    this.setReleaseQueueId(null);

    reloadReleaseButton.disabled = false;
  }

  // Upon releasing a new CAE application release check if version is valid, so already now check if version is not already present
  async checkIfVersionValid() {
    var allServices = [];
    var releaseVersions = [];
    await fetch(Static.RegistryURL + "/las2peer/services/services", {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        allServices = data;
      });
    allServices.forEach((service) => {
      Object.keys(service.releases).forEach((releaseVersion) => {
        if (
          service.releases[releaseVersion].supplement.name ==
          this.cleanFormatString("cae-app-" + this.projectName) &&
          service.releases[releaseVersion].supplement.id ==
            this.applicationId &&
          service.releases[releaseVersion].supplement.type == "cae-application"
        ) {
          releaseVersions.push(releaseVersion);
        }
      });
    });
    releaseVersions.forEach((version) => {
      if (gt(version, this.highestApplicationReleaseVersion)) {
        this.highestApplicationReleaseVersion = version;
      }
    });

    var currentVersion =
      this.getVersionNumberInput(1).value +
      "." +
      this.getVersionNumberInput(2).value +
      "." +
      this.getVersionNumberInput(3).value;
    var versionNumberValid = await gt(
      currentVersion,
      this.highestApplicationReleaseVersion
    );
    if (!versionNumberValid) {
      this.showToast(
        "Version should be higher than " + this.highestApplicationReleaseVersion
      );
      return false;
    } else {
      return true;
    }
  }

  getReleaseStatusTextarea() {
    return this.shadowRoot.getElementById("release-status");
  }

  getStatusInput() {
    return this.shadowRoot.getElementById("status");
  }

  async getProjectInfoAndCheckIfProjectExists() {
    this.projectExists = false;
    var pathname = window.location.pathname.split("/");
    var id = pathname[pathname.length - 1];
    this.applicationId = String(id);
    var users = [];
    this.namePrefixDefaultValue = "cae-app-" + "projectName";
    var selectedProject;

    await fetch(Static.ProjectManagementServiceURL + "/projects", {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        data.forEach((project) => {
          project.components.forEach((component) => {
            if (
              component.versionedModelId == id &&
              component.type == "application"
            ) {
              selectedProject = project;
              this.projectExists = true;
            }
          });
        });
      });
    this.projectName = this.cleanFormatString(selectedProject.name);
    selectedProject.users.forEach((user) => {
      users.push(user.loginName);
    });
    this.projectUsers = users;
    this.namePrefixDefaultValue = this.cleanFormatString("cae-app-" + this.projectName);

    await this._getReleasesOfApplication();
    this.requestUpdate();
  }
  //

  setDeploying() {
    this.y.share.data.set("deploymentStatus", "setDeploying");
  }
  setCheckNameAvailable() {
    this.y.share.data.set("deploymentStatus", "setCheckNameAvailable");
  }
  setAlreadyDeployed() {
    this.y.share.data.set("deploymentStatus", "setAlreadyDeployed");
  }
  setNotReleasing() {
    this.y.share.data.set("deploymentStatus", "setNotDeploying");
  }

  showToast(text) {
    const toastElement = this.shadowRoot.getElementById("toast");
    toastElement.text = text;
    toastElement.show();
  }

  changeRoute() {
    this.set("route.path", "/test-deploy/" + Common.getVersionedModelId());
  }

  cleanFormatString(stringToFormat) {
    var arrayOfWords = stringToFormat.split(" ");
    var formatedWord = "";
    arrayOfWords.forEach((word) => {
      formatedWord = formatedWord + word + "-";
    });
    var temp = formatedWord.substring(0, formatedWord.length - 1);
    const cleanedAndFormatedWord = temp.toLowerCase();
    return cleanedAndFormatedWord;
  }
  returnWordList() {
    return [
      "chug",
      "port",
      "agal",
      "redo",
      "esth",
      "goon",
      "hopi",
      "conn",
      "vico",
      "dime",
      "hols",
      "dual",
      "juba",
      "slut",
      "safi",
      "puca",
      "yodh",
      "dyke",
      "exam",
      "prov",
      "brim",
      "boob",
      "math",
      "coed",
      "heal",
      "zeta",
      "bias",
      "napa",
      "heap",
      "stew",
      "pair",
      "chem",
      "guns",
      "ceyx",
      "glyn",
      "bard",
      "hall",
      "loun",
      "rote",
      "axle",
      "yean",
      "kung",
      "pale",
      "mage",
      "ymha",
      "purr",
      "cast",
      "ivar",
      "lion",
      "fyke",
      "ache",
      "thor",
      "quod",
      "genl",
      "sect",
      "tana",
      "prut",
      "wait",
      "send",
      "frug",
      "form",
      "bury",
      "raff",
      "cohn",
      "clea",
      "alar",
      "conk",
      "rego",
      "nysa",
      "cete",
      "gybe",
      "auto",
      "mina",
      "oryx",
      "lati",
      "hone",
      "nurl",
      "lalu",
      "lean",
      "idly",
      "nave",
      "poon",
      "alfa",
      "sour",
      "zond",
      "alep",
      "sage",
      "greg",
      "opus",
      "ibis",
      "laic",
      "pier",
      "crow",
      "cove",
      "tike",
      "nerc",
      "glob",
      "jamb",
      "atys",
      "dita",
    ];
  }
}

window.customElements.define("test-deploy", TestDeploy);
