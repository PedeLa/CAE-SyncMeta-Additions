import { LitElement, html } from "lit-element";
import "./versioning/versioning-element.js";
import Common from "./util/common.js";
import Static from "./static.js";
import "@polymer/iron-icon";
import "../node_modules/@polymer/paper-card/paper-card.js";
import "../node_modules/@polymer/paper-button/paper-button.js";

/**
 * @customElement
 * @polymer
 */
class AllApplications extends LitElement {
  render() {
    return html`
      <style>
        @keyframes ldio-jm1q7kom26f {
          0% {
            top: 34px;
            left: 34px;
            width: 0;
            height: 0;
            opacity: 1;
          }
          100% {
            top: -6px;
            left: -6px;
            width: 80px;
            height: 80px;
            opacity: 0;
          }
        }
        .ldio-jm1q7kom26f div {
          position: absolute;
          border-width: 16px;
          border-style: solid;
          opacity: 1;
          border-radius: 50%;
          animation: ldio-jm1q7kom26f 1.639344262295082s
            cubic-bezier(0, 0.2, 0.8, 1) infinite;
        }
        .ldio-jm1q7kom26f div:nth-child(1) {
          border-color: #3be8b0;
          animation-delay: 0s;
        }
        .ldio-jm1q7kom26f div:nth-child(2) {
          border-color: #1aafd0;
          animation-delay: -0.819672131147541s;
        }
        .loadingio-spinner-ripple-m02fhe6rx7j {
          width: 31px;
          height: 31px;
          display: inline-block;
          overflow: hidden;
          background: none;
        }
        .ldio-jm1q7kom26f {
          width: 100%;
          height: 100%;
          position: relative;
          transform: translateZ(0) scale(0.31);
          backface-visibility: hidden;
          transform-origin: 0 0; /* see note above */
        }
        .ldio-jm1q7kom26f div {
          box-sizing: content-box;
        }
        /* generated by https://loading.io/ */
        @keyframes ldio-eec3ctrm1go {
          0% {
            transform: rotate(0deg);
          }
          100% {
            transform: rotate(360deg);
          }
        }
        .ldio-eec3ctrm1go > div > div {
          position: absolute;
          border-radius: 50%;
        }
        .ldio-eec3ctrm1go > div > div:nth-child(1) {
          top: 9px;
          left: 9px;
          width: 82px;
          height: 82px;
          background: #df1317;
        }
        .ldio-eec3ctrm1go > div > div:nth-child(2) {
          top: 13.920000000000002px;
          left: 30.32px;
          width: 39.36px;
          height: 39.36px;
          background: #e4934b;
          animation: ldio-eec3ctrm1go 1s linear infinite;
          transform-origin: 19.68px 36.08px;
        }
        .loadingio-spinner-disk-wamj36whduk {
          width: 24px;
          height: 24px;
          display: inline-block;
          overflow: hidden;
          background: none;
        }
        .ldio-eec3ctrm1go {
          width: 100%;
          height: 100%;
          position: relative;
          transform: translateZ(0) scale(0.24);
          backface-visibility: hidden;
          transform-origin: 0 0; /* see note above */
        }
        .ldio-eec3ctrm1go div {
          box-sizing: content-box;
        }
        /* generated by https://loading.io/ */
        .deploy-paper {
          padding: 30px;
          width: 100%;
          background: radial-gradient(bisque, floralwhite);
        }
        .deployment-info {
          display: flex;
          flex-direction: column;
          text-align: center;
          align-items: baseline;
        }
        .summary-see-release {
          padding: 1em;
        }
        .summary {
          padding: 1em;
        }
        .see-releases-paper {
          width: 100%;
        }
        .release-deployments-paper {
          width: 100%;
          display: flex;
          justify-content: space-between;
          align-items: center;
          align-content: center;
          padding-top: 2em;
          padding-bottom: 2em;
          padding-left: 1em;
          padding-right: 1em;
        }
        .running-applications-paper {
          width: 100%;
          margin-top: 1em;
        }
        .running-applications {
          display: flex;
          margin-top: 1em;
          align-items: center;
          padding: 2em;
        }
        .running-applications:hover {
          background: #eeeeee;
        }
        .running-applications-content {
          width: 100%;
          height: 100%;
          align-items: flex-end;
          display: flex;
          align-content: center;
        }
        .open-running-applications {
          text-align: center;
          align-items: center;
          display: flex;
          align-content: center;
          color: rgb(240, 248, 255);
          background: rgb(30, 144, 255);
        }
        .open-running-applications:hover {
          color: rgb(240, 248, 255);
          background: rgb(65, 105, 225);
        }
        .open-release-application {
          text-align: center;
          align-items: center;
          align-content: center;
          color: rgb(240, 248, 255);
          background: rgb(30, 144, 255);
        }
        .open-release-application:hover {
          text-align: center;
          align-items: center;
          align-content: center;
          color: rgb(240, 248, 255);
          background: rgb(65, 105, 225);
        }
        .stop-release-application {
          text-align: center;
          align-items: center;
          align-content: center;
          color: rgb(240, 248, 255);
          background: rgb(234, 8, 8);
        }
        .stop-release-application:hover {
          text-align: center;
          align-items: center;
          align-content: center;
          color: rgb(240, 248, 255);
          background: rgb(255, 51, 51);
        }

        .edit-running-applications {
          width: 50%;
          height: 50%;
          align-items: center;
          display: flex;
          align-content: center;

          color: rgb(240, 248, 255);
          background: rgb(252, 194, 3);
          max-height: 30px;
        }
        .edit-running-applications:hover {
          color: rgb(240, 248, 255);
          background: rgb(232, 178, 0);
        }
        .outer {
          display: flex;
          flex-flow: column;
          height: 100%;
        }
        .nothing-deployed {
          text-align: center;
          margin: auto;
          width: 100%;
          height: 100%;
          border: 3px solid green;
          padding: 10px;
        }
        .textbox {
          background-color: #fff;
          color: black;
          padding: 3px;
          border-bottom: 1px #888 solid;
          display: flex;
          flex-direction: row;
        }

        .textbox input {
          border: 0px;
          background-color: #fff;
          outline: none;
          font-size: medium;
        }
      </style>

      ${this.runningApplications.length != 0
        ? html` <div>
            ${this.runningApplications.map(
              (app) => html`
                <paper-card class="running-applications-paper">
                  <div class="running-applications">
                    <div class="running-applications-content">${app.name}</div>
                    <div class="running-applications-content">
                      Number of releases: ${Object.keys(app.releases).length}
                    </div>

                    <paper-button
                      class="edit-running-applications"
                      @click=${(e) => {
                        this._onEditAppClicked(
                          app.releases[Object.keys(app.releases)[0]].supplement
                            .id
                        );
                      }}
                      >Edit app</paper-button
                    >
                  </div>
                  <paper-card class="see-releases-paper">
                    <details>
                      <summary class="summary-see-release">
                        See Releases
                      </summary>
                      ${Object.keys(app.releases).map(
                        (release) => html`
                          <div
                            style="display: flex; flex-direction: row;align-items: center;align-content: center; border: 1px solid grey;"
                          >
                            <details style="flex-grow: 4; ">
                              <summary class="summary">
                                <div
                                  style="display:flex; flex-direction: column; margin-left:20px"
                                >
                                  <div>
                                    Deployments of release version ${release}:
                                  </div>
                                  <div>
                                    Created by:
                                    ${app.releases[release].supplement.users}
                                  </div>
                                  <div>
                                    Number of deployments:
                                    ${app.releases[release].instances.length}
                                  </div>
                                </div>
                              </summary>
                              ${app.releases[release].instances.map(
                                (deployment) =>
                                  html` <div>
                                    <paper-card
                                      class="release-deployments-paper"
                                    >
                                      <div class="deployment-info">
                                        <div>${deployment.clusterName}</div>
                                        <div>Time: ${deployment.time}</div>
                                      </div>
                                      <div
                                        style="display: flex; flex-direction: row;"
                                      >
                                        <paper-button
                                          class="open-release-application"
                                          @click=${(e) => {
                                            this._onOpenAppClicked(
                                              deployment.link
                                            );
                                          }}
                                          id="button-open-${deployment.clusterName}"
                                          >Open app</paper-button
                                        >
                                        <paper-button
                                          class="stop-release-application"
                                          id="button-${deployment.clusterName}"
                                          @click=${(e) => {
                                            this._onUndeployButtonClicked(
                                              deployment,
                                              deployment.clusterName
                                            );
                                          }}
                                          ><div
                                            id="text-${deployment.clusterName}"
                                          >
                                            Stop deployment
                                          </div>
                                          <div
                                            id="indicator-${deployment.clusterName}"
                                            style="display:none;"
                                          >
                                            <div
                                              class="loadingio-spinner-disk-wamj36whduk"
                                            >
                                              <div class="ldio-eec3ctrm1go">
                                                <div>
                                                  <div></div>
                                                  <div></div>
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        </paper-button>
                                      </div>
                                    </paper-card>
                                  </div>`
                              )}
                            </details>
                            <div style="padding-right: 55px;">
                              <paper-button
                                class="open-running-applications"
                                @click=${(e) => {
                                  this._openDeployInfoSection(
                                    app.releases[release]
                                  );
                                }}
                                >Deploy instance</paper-button
                              >
                            </div>
                          </div>
                        `
                      )}
                    </details>
                  </paper-card>
                </paper-card>

                <div id="${app.name}" style="display: none">
                  <paper-card class="deploy-paper">
                    ${
                      this.selectedRelease != undefined
                        ? html`
                            <div style="display:flex; flex-direction: column;">
                              <div
                                style="display:flex; flex-direction: row-reverse;"
                              >
                                <paper-icon-button
                                  icon="close"
                                  @click=${(e) => {
                                    this._closeDeployInfoSection(app.name);
                                  }}
                                ></paper-icon-button>
                              </div>
                              <div style="display:flex; flex-direction: row;">
                                <div>
                                  <div
                                    style="display:flex; flex-direction: column; flex-grow: 4;"
                                  >
                                    <div
                                      style="display:flex; flex-direction: column; margin-bottom: 20px"
                                    >
                                      <div
                                        style="display:flex; flex-direction: row;justify-content: space-between;align-items: center;align-content: center;"
                                      >
                                        <div>Name</div>
                                        <div>Version: ${this.selectedRelease.supplement.version}</div>
                                      </div>
                                      <span
                                        class="textbox"
                                        style="column-span: all; word-break: break-all; width:25rem"
                                      >
                                        <div
                                          style="display: flex;flex-direction: row;"
                                        >
                                          <div style="flex-shrink:1">
                                            ${this.selectedRelease.supplement
                                              .name}-
                                          </div>

                                          <input
                                            id="nameDefaultValue"
                                            type="text"
                                            @input="${this
                                              .nameDefaultValueInput}"
                                            .value="${this.nameDefaultValue}"
                                            style="flex-grow:1"
                                          />
                                        </div>
                                      </span>
                                    </div>
                                    <div
                                      style="display:flex; flex-direction: column; margin-bottom: 30px"
                                    >
                                      URL
                                      <paper-span
                                        class="textbox"
                                        style="column-span: all; word-break: break-all; width:25rem"
                                      >
                                        <div>
                                          ${this.urlPrefixDefaultValue}${this
                                            .selectedRelease.supplement
                                            .name}-${this.nameDefaultValue}
                                          <input
                                            type="text"
                                            id="urlDefaultValue"
                                            type="text"
                                            @input="${this
                                              .urlDefaultValueInput}"
                                            .value="${this.urlDefaultValue}"
                                          />
                                        </div>
                                      </paper-span>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  style="align-items: center; display: flex; flex-direction: column; padding: 20px;"
                                >
                                  <details
                                    id="auto-details-node"
                                    style="outline:none; width: 100%;"
                                    @click=${(e) => {
                                      this.shadowRoot.getElementById(
                                        "manual-details-node"
                                      ).open = false;
                                    }}
                                  >
                                    <summary style="outline:none">
                                      Select existing Bootstrap
                                    </summary>
                                    <ul
                                      id="ss_elem_list"
                                      aria-labelledby="id"
                                      style="height:100px; overflow:hidden; overflow-y:scroll; outline:none;"
                                    >
                                      ${this.availableBootstrapNodes.map(
                                        (node) => html`
                                          <li
                                            class="bootstrap-node"
                                            id=${node.clusterName}
                                            @click=${(e) => {
                                              this.onBootstrapNodeClicked(node);
                                            }}
                                          >
                                            ${node.clusterName}
                                          </li>
                                        `
                                      )}
                                    </ul>
                                  </details>
                                  <details
                                    id="manual-details-node"
                                    style="outline:none; width: 100%;"
                                    @click=${(e) => {
                                      this.shadowRoot.getElementById(
                                        "auto-details-node"
                                      ).open = false;
                                    }}
                                  >
                                    <summary style="outline:none">
                                      Enter manually IP and Port
                                    </summary>
                                    <span class="textbox">
                                      <input
                                        style="flex:1;"
                                        type="text"
                                        id="bootstrapNodeURL"
                                        @input="${this.bootstrapNodeURLInput}"
                                        .value="${this.bootstrapNodeURL}"
                                      />
                                      <input
                                        style="background-color: #dcdcdc; width:20%"
                                        type="number"
                                        id="bootstrapNodePort"
                                        @input="${this.bootstrapNodePortInput}"
                                        .value="${this.bootstrapNodePort}"
                                      />
                                    </span>
                                  </details>
                                </div>
                              </div>
                            </div>
                            <!-- <div
                            style="display:flex; flex-direction: column; flex-grow: 4;"
                          >
                            <div style="display:flex; flex-direction: column;">
                              <div
                                style="display:flex; flex-direction: row;justify-content: space-between;align-items: center;align-content: center;"
                              >
                                <div>Name</div>
                                <paper-icon-button
                                  icon="close"
                                  @click=${(e) => {
                              this._closeDeployInfoSection(app.name);
                            }}
                                ></paper-icon-button>
                              </div>
                              <span
                                class="textbox"
                                style="display:flex; flex-direction: row;"
                              >
                                <paper-input
                                  type="text"
                                  id="release-name-input"
                                  name="country"
                                  value="${this.selectedRelease.supplement
                              .name}-"
                                  readonly
                                ></paper-input>
                                <paper-input
                                  id="name-input"
                                  type="text"
                                  .value="${this.clusterNamePostfix}"
                                  value="{{clusterNamePostfix}}"
                                ></paper-input>
                              </span>
                            </div>
                            <div style="display:flex; flex-direction: column;">
                              URL
                              <span
                                class="textbox"
                                style="display:flex; flex-direction: row;"
                              >
                                <paper-input
                                  id="url-input"
                                  type="text"
                                  .value="${this.urlDefaultValue}"
                                ></paper-input>
                              </span>
                            </div>
                          </div> -->
                          `
                        : `Select a Release`
                    }
                  <paper-button
                    id="button-deployment-button"
                    @click=${(e) => {
                      this._onDeployReleaseButtonClicked("deployment-button");
                    }}
                    class="paper-button-blue"
                  >
                    <div id="text-deployment-button">Deploy your release</div>

                    <div id="indicator-deployment-button" style="display:none;">
                      <div class="loadingio-spinner-ripple-m02fhe6rx7j">
                        <div class="ldio-jm1q7kom26f">
                          <div></div>
                          <div></div>
                        </div>
                      </div>
                    </div>
                  </paper-button>
                </div>
              `
            )}
          </div>`
        : html`<div class="outer">
            <paper-card class="nothing-deployed">Nothing deployed</paper-card>
          </div>`}

      <paper-toast id="toast" text="Will be changed later."></paper-toast>
    `;
  }

  _openDeployInfoSection(release) {
    this.selectedRelease = release;
    console.log(release);
    console.log(release.supplement.name);
    if (
      this.shadowRoot.getElementById(release.supplement.name).style.display ==
      "none"
    ) {
      this.shadowRoot.getElementById(release.supplement.name).style.display =
        "block";
    } else {
      this.shadowRoot.getElementById(release.supplement.name).style.display =
        "none";
    }
  }

  _closeDeployInfoSection(id) {
    this.shadowRoot.getElementById(id).style.display = "none";
  }
  _onOpenAppClicked(link) {
    window.open(link, "_blank");
  }
  _onEditAppClicked(id) {
    window.open(
      Static.WebhostURL + "/cae-deploy/test-deploy/" + id.toString(),
      "_blank"
    );
  }
  static get properties() {
    return {
      pendingDots: {
        type: Number,
      },
      selectedRelease: {
        type: Object,
      },
      runningApplications: {
        type: Array,
      },
      clusterNamePostfix: {
        type: String,
      },
      urlDefaultValue: {
        type: String,
      },
      nameDefaultValue: {
        type: String,
      },
      urlPrefixDefaultValue: {
        type: String,
      },
      wordList: {
        type: Array,
      },
      availableBootstrapNodes: {
        type: Array,
      },
      selectedBootstrapNode: {
        type: Object,
      },
      bootstrapNodeURL: {
        type: Object,
      },
      bootstrapNodePort: {
        type: Object,
      },
    };
  }

  constructor() {
    super();
    this._getAvailableBootstrapNodes();
    this.urlDefaultValue = "";
    this.wordList = this.returnWordList();
    this.nameDefaultValue =
      this.wordList[Math.floor(Math.random() * this.wordList.length)] +
      "-" +
      this.wordList[Math.floor(Math.random() * this.wordList.length)];
    this.runningApplications = [];
    this.getAllRunningApplications();
    this.clusterNamePostfix = "";
    this.urlPrefixDefaultValue =
      "https://mentoring.tech4comp.dbis.rwth-aachen.de/mydeployment/";
    this.pendingDots = 0;
    this.bootstrapNodeURL = "137.226.107.63";
    this.bootstrapNodePort = 113;
  }
  bootstrapNodeURLInput() {
    var temp = this.shadowRoot.getElementById("bootstrapNodeURL");
    this.bootstrapNodeURL = temp.value;
  }
  urlDefaultValueInput() {
    var temp = this.shadowRoot.getElementById("urlDefaultValue");
    this.y.share.data.set("urlDefaultValue", temp.value);
  }
  onBootstrapNodeClicked(selectedNode) {
    var allNodes = this.shadowRoot.querySelectorAll(
      `[class*="bootstrap-node"]`
    );

    allNodes.forEach((node) => {
      node.style = "";
    });
    var clickedBootstrapNode = this.shadowRoot.getElementById(
      selectedNode.clusterName
    );
    clickedBootstrapNode.style =
      "border: rgb(175 249 228) solid; border-radius: 10px;";
    this.selectedBootstrapNode = selectedNode;
  }
  urlDefaultValueInput() {
    var temp = this.shadowRoot.getElementById("urlDefaultValue");
    this.urlDefaultValue = temp.value;
  }

  nameDefaultValueInput() {
    var temp = this.shadowRoot.getElementById("nameDefaultValue");
    this.nameDefaultValue = temp.value;
  }
  showToast(text) {
    const toastElement = this.shadowRoot.getElementById("toast");
    toastElement.text = text;
    toastElement.show();
  }

  getDeploymentButton() {
    return this.shadowRoot.getElementById("deployment-button");
  }

  async _getAvailableBootstrapNodes() {
    var deployments = [];
    this.availableBootstrapNodes = [];
    await fetch(Static.RegistryURL + "/las2peer/services/deployments", {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        deployments = data;
      });
    Object.keys(deployments).forEach((release) => {
      deployments[release].forEach((deployment) => {
        if (deployment.type == "cae-application") {
          this.availableBootstrapNodes.push(deployment);
        }
      });
    });
  }
  async getAllRunningApplications() {
    var services = [];
    await fetch(Static.RegistryURL + `/las2peer/services/services`, {
      method: "GET",
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        services = data;
        if (services == []) {
          this.showToast("No deployments");
        }
      })
      .catch((_) => {
        this.showToast("Error probably down");
      });
    services.forEach((service) => {
      Object.keys(service.releases).forEach((releaseVersion) => {
        if (
          service.releases[releaseVersion].supplement.type == "cae-application"
        ) {
          if (this.runningApplications.indexOf(service) == -1) {
            this.runningApplications.push(service);
          }
        }
      });
    });
    this.requestUpdate();
  }

  // undeploy instance of selected release
  async _onUndeployButtonClicked(deployment, buttonId) {
    this.setUndeployButtonLoading(buttonId);
    await fetch(
      Static.ModelPersistenceServiceURL +
        "/deploy/" +
        String(deployment.id) +
        "/" +
        "UndeployFromCluster",
      {
        method: "POST",
        body:
          '{"name":"' +
          deployment.name +
          '","clusterName":"' +
          deployment.clusterName +
          '","version":"' +
          deployment.version +
          '"}',
      }
    )
      .then((response) => {
        if (response.status == "200") {
          this.setUndeployButtonLoading(buttonId);
          return response.text();
        } else {
          throw new Error(response.status);
        }
      })
      .then((data) => {
        console.log(data);
        this.pollJobConsoleText(data, buttonId);
      })
      .catch((e) => {
        console.log(e);
        this.setUndeployButtonDone(buttonId);
      });
  }

  setUndeployButtonLoading(buttonId) {
    var undeployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var undeployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorUndeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );

    undeployButton.disabled = true;
    undeployButton.style = "background:rgb(191, 116, 81);";
    undeployButtonText.innerText = "Undeploying";

    indicatorUndeployButton.style.display = "block";
    indicatorUndeployButton.disabled = true;
  }

  setUndeployButtonDone(buttonId) {
    var undeployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var undeployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorUndeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var openDeploymentButton = this.shadowRoot.getElementById(
      "button-open-" + buttonId
    );

    undeployButton.disabled = true;
    undeployButtonText.innerText = "Undeployed";
    undeployButton.style = "background: rgb(228, 154, 199);";

    indicatorUndeployButton.style.display = "none";
    indicatorUndeployButton.disabled = false;

    openDeploymentButton.style.display = "none";
  }

  setUndeployButtonError(buttonId) {
    var undeployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var undeployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorUndeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );

    undeployButton.disabled = false;
    undeployButtonText.innerText = "Error";
    undeployButton.style = "background: rgb(255, 154, 155);";

    indicatorUndeployButton.style.display = "none";
    indicatorUndeployButton.disabled = false;
  }

  pollJobConsoleText(location, buttonId) {
    setTimeout(
      function () {
        this.getJobConsoleText(location, buttonId);
      }.bind(this),
      1000
    );
  }

  getJobConsoleText(queueItem, buttonId) {
    fetch(
      Static.ModelPersistenceServiceURL +
        "/deployStatus?queueItem=" +
        queueItem,
      {
        method: "GET",
      }
    )
      .then((response) => {
        if (response.status != 200) {
          throw new Error(response.status);
        } else {
          return response.text();
        }
      })
      .then((data) => {
        if (data.indexOf("Pending") > -1) {
          this.setUndeployButtonLoading(buttonId);
          this.pollJobConsoleText(queueItem, buttonId);
        } else if (data.indexOf("Done") > -1) {
          this.setUndeployButtonDone(buttonId);
        } else if (data.indexOf("Finished: SUCCESS") > -1) {
          this.setUndeployButtonDone(buttonId);
        } else if (data.indexOf("Finished: FAILURE") > -1) {
          this.setUndeployButtonError(buttonId);
        } else {
          this.pollJobConsoleText(queueItem, buttonId);
        }
      })
      .catch((e) => {
        this.setUndeployButtonError(buttonId);
      });
  }
  // deploy own instance of selected release
  // user can choose release version to deploy

  async _onDeployReleaseButtonClicked(buttonId) {
    var deployNameAvailable = true;
    var clusterName =
      this.selectedRelease.supplement.name + "-" + this.nameDefaultValue;
    deployNameAvailable = await this.checkIfDeploymentNameAvailable(
      clusterName
    );
    var deploymentData = {};

    deploymentData["id"] = this.selectedRelease.supplement.id;
    deploymentData["name"] = this.selectedRelease.supplement.name;
    deploymentData["clusterName"] = clusterName;
    deploymentData["version"] = this.selectedRelease.supplement.version;
    deploymentData["type"] = this.selectedRelease.supplement.type;

    if (deployNameAvailable == true) {
      if (this.shadowRoot.getElementById("auto-details-node").open) {
        // Get selected bootstrap node
        deploymentData["bootstrap"] = this.selectedBootstrapNode.clusterName;
        this._sendDeploymentRequest(
          "DeployToCluster",
          deploymentData,
          buttonId
        );
      } else if (this.shadowRoot.getElementById("manual-details-node").open) {
        // Get entered information for bootstrap node
        console.log(this.bootstrapNodeURL);
        if (
          /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(
            this.bootstrapNodeURL
          )
        ) {
          if (
            /^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/.test(
              this.bootstrapNodePort
            )
          ) {
            var ipAndPort =
              this.bootstrapNodeURL + ":" + this.bootstrapNodePort;
            deploymentData["bootstrap"] = ipAndPort;

            this._sendDeploymentRequest(
              "DeployToCluster",
              deploymentData,
              buttonId
            );
          } else {
            this.showToast("Your Port address is invalid");
          }
        } else {
          this.showToast("Your IP address is invalid");
        }
      } else {
        deploymentData["bootstrap"] = "";
        this._sendDeploymentRequest(
          "DeployToCluster",
          deploymentData,
          buttonId
        );
      }
    } else {
      this.showToast("Name already taken, choose another one");
    }
  }

  async _sendDeploymentRequest(jobAlias, deploymentData, buttonId) {
    var id = deploymentData.id;
    if (id == undefined) {
      this.showToast("Error getting project id");
    } else {
      this.setDeployButtonLoading(buttonId);
      var validName = /^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$/.test(
        deploymentData.clusterName
      );
      if (validName == false) {
        this.showToast("Name invalid, only use low letters and -, _ if needed");
      } else {
        fetch(
          Static.ModelPersistenceServiceURL +
            "/deploy/" +
            String(id) +
            "/" +
            jobAlias,
          {
            method: "POST",
            body: `${JSON.stringify(deploymentData)}`,
          }
        )
          .then((response) => {
            if (response.status == "200") {
              this.setDeployButtonLoading(buttonId);
              return response.text();
            } else {
              throw new Error(response.status);
            }
          })
          .then((data) => {
            if (data.startsWith("/queue")) {
              console.log(data);
              this.pollDeploymentJobConsoleText(data, buttonId);
            } else {
              console.log(data);
              throw new Error("Got no queue id");
            }
          })
          .catch((e) => {
            console.log(e);
            this.setDeployButtonError(buttonId);
          });
      }
    }
  }
  async checkIfDeploymentNameAvailable(clusterName) {
    var deployments = [];
    await fetch(Static.RegistryURL + "/las2peer/services/deployments", {
      method: "GET",
    })
      .then((response) => {
        console.log(response);
        return response.json();
      })
      .then((data) => {
        deployments = data;
      });
    var nameAvailable = true;
    Object.keys(deployments).forEach((release) => {
      deployments[release].forEach((deployment) => {
        if (deployment.clusterName.normalize() == clusterName) {
          nameAvailable = false;
        }
      });
    });
    return nameAvailable;
  }

  pollDeploymentJobConsoleText(location, buttonId) {
    setTimeout(
      function () {
        this.getDeploymentJobConsoleText(location, buttonId);
      }.bind(this),
      1000
    );
  }
  getDeploymentJobConsoleText(queueItem, buttonId) {
    fetch(
      Static.ModelPersistenceServiceURL +
        "/deployStatus?queueItem=" +
        queueItem,
      {
        method: "GET",
      }
    )
      .then((response) => {
        if (response.status != 200) {
          throw new Error(response.status);
        } else {
          return response.text();
        }
      })
      .then((data) => {
        console.log(data);
        if (data.indexOf("Pending") > -1) {
          this.setDeployButtonLoading(buttonId);
          this.getDeploymentJobConsoleText(queueItem, buttonId);
        } else if (data.indexOf("Done") > -1) {
          this.setDeployButtonDone(buttonId);
        } else if (data.indexOf("Finished: SUCCESS") > -1) {
          this.setDeployButtonDone(buttonId);
        } else if (data.indexOf("Finished: FAILURE") > -1) {
          this.setDeployButtonError(buttonId);
        } else {
          this.setDeployButtonLoading(buttonId);
          this.getDeploymentJobConsoleText(queueItem, buttonId);
        }
      })
      .catch((e) => {
        console.log(e);
        this.setDeployButtonError(buttonId);
      });
  }

  setDeployButtonLoading(buttonId) {
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );

    deployButton.disabled = true;
    deployButton.style = "background:rgb(160, 73, 134);";
    deployButtonText.innerText = "Deploying";

    indicatorDeployButton.style = "display:block;";
    indicatorDeployButton.disabled = true;
  }

  setDeployButtonDone(buttonId) {
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );
    var openDeploymentButton = this.shadowRoot.getElementById(
      "open-deployment-button"
    );

    deployButton.disabled = true;
    deployButtonText.innerText = "Deployed";
    deployButton.style = "background: rgb(73, 160, 80);";

    indicatorDeployButton.style = "display:none;";
    indicatorDeployButton.disabled = false;
  }

  setDeployButtonError(buttonId) {
    console.log(buttonId);
    var deployButton = this.shadowRoot.getElementById("button-" + buttonId);
    var deployButtonText = this.shadowRoot.getElementById("text-" + buttonId);
    var indicatorDeployButton = this.shadowRoot.getElementById(
      "indicator-" + buttonId
    );

    deployButton.disabled = true;
    deployButtonText.innerText = "Error";
    deployButton.style = "background: rgb(193, 77, 77);";

    indicatorDeployButton.style = "display:none;";
    indicatorDeployButton.disabled = false;
  }

  returnWordList() {
    return [
      "chug",
      "port",
      "agal",
      "redo",
      "esth",
      "goon",
      "hopi",
      "conn",
      "vico",
      "dime",
      "hols",
      "dual",
      "juba",
      "slut",
      "safi",
      "puca",
      "yodh",
      "dyke",
      "exam",
      "prov",
      "brim",
      "boob",
      "math",
      "coed",
      "heal",
      "zeta",
      "bias",
      "napa",
      "heap",
      "stew",
      "pair",
      "chem",
      "guns",
      "ceyx",
      "glyn",
      "bard",
      "hall",
      "loun",
      "rote",
      "axle",
      "yean",
      "kung",
      "pale",
      "mage",
      "ymha",
      "purr",
      "cast",
      "ivar",
      "lion",
      "fyke",
      "ache",
      "thor",
      "quod",
      "genl",
      "sect",
      "tana",
      "prut",
      "wait",
      "send",
      "frug",
      "form",
      "bury",
      "raff",
      "cohn",
      "clea",
      "alar",
      "conk",
      "rego",
      "nysa",
      "cete",
      "gybe",
      "auto",
      "mina",
      "oryx",
      "lati",
      "hone",
      "nurl",
      "lalu",
      "lean",
      "idly",
      "nave",
      "poon",
      "alfa",
      "sour",
      "zond",
      "alep",
      "sage",
      "greg",
      "opus",
      "ibis",
      "laic",
      "pier",
      "crow",
      "cove",
      "tike",
      "nerc",
      "glob",
      "jamb",
      "atys",
      "dita",
    ];
  }
}

window.customElements.define("all-applications", AllApplications);
